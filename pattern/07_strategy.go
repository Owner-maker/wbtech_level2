package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern

Поведенческий паттерн

Применимость:
1) При необходимости настройки поведения объекта под конкретный случай. Мы можем вынести поведение класса (структуры) в отдельную иерархию структури
использовать нужное по необходимости
2) Возможность "распределить" логику или поведение объекта, словом, разбить условный оператор на части, при этом легко заменяемые
3) ВОзможность провести разграничение или отделить код алгоритма (поведения) структуры от других объектов
4) При необходимости менять по ходу действия поведение объекта

Плюсы:
1) Замена поведения на лету
2) Изоляция логики от остальных объектов
3) Принцип закрытости открытости

Минусы:
1) Усложнение кода добавлением новых структур (на мой взгляд как и любой другой паттерн, но все зависит от его пользы в моменте)
2) Клиент должен знать, какую именно стратегию применять

Примеры:
1) К примеру в использовании сервиса прокладывания машрута: нам необходимо на ходу удобно подкладывать новое поведение (прокладывание маршрута) для
пользователя

Мой пример:
Представим, что те данные, которые нам приходят нам необходимо обрабатывать по-разному. К примеру использовать разные сортировки (или поиск элемента).

*/

// главный интерефейс стратегии с единственным методом для осуществления сортировки

type SortAlgorithm interface {
	sort(d *Data)
}

// структура с полем values типа []int - данными и полем типа SortAlgorithm -> конкретной реализацией стратегии сортировки

type Data struct {
	values        []int
	sortAlgorithm SortAlgorithm
}

// конструктор

func newData(values ...int) Data {
	return Data{values: values}
}

// метод для установки алгоритма сортировки

func (d *Data) setSortAlgorithm(algorithm SortAlgorithm) {
	d.sortAlgorithm = algorithm
}

// метод сортировки -> вызывает метод стортировки конкретной стратегии внутри структуры

func (d *Data) sort() {
	d.sortAlgorithm.sort(d)
}

// конкретные реализации стретегий сортировок

type QuickSort struct {
}

func (q *QuickSort) sort(d *Data) {
	// ..... do sorting
}

type BubbleSort struct {
}

func (q *BubbleSort) sort(d *Data) {
	// ..... do sorting
}

type InsertionSort struct {
}

func (q *InsertionSort) sort(d *Data) {
	// ..... do sorting
}

// пример использования

func StrategyTest() {
	data := newData(1, 5, -2, 4, 0)

	bubbleSort := BubbleSort{}
	insertionSort := InsertionSort{}

	data.setSortAlgorithm(&bubbleSort)
	data.sort()

	data.setSortAlgorithm(&insertionSort)
	data.sort()
}
